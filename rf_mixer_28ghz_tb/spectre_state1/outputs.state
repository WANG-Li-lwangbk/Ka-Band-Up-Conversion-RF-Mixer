_outputList = nil
 _envSaveOptions = nil
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "Conversion voltage gain from IF to RF"
tmp1->expression = (let
(tmp1 tmp2)
tmp1 = 'ymax
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'db
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'quotient
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/XFMRP"
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = (let
(tmp1)
tmp1 = 5
list(tmp1)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4)
)
tmp3 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/XFMRN"
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = (let
(tmp1)
tmp1 = 5
list(tmp1)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4)
)
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/IFIP0"
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = (let
(tmp1)
tmp1 = 1
list(tmp1)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4)
)
tmp3 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/IFIN0"
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = (let
(tmp1)
tmp1 = 1
list(tmp1)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = 't
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = 1.4857534425434689e+01
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 1
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "Conversion voltage gain from IF to RF"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "Conversion power gain from IF to RF"
tmp1->expression = (let
(tmp1 tmp2)
tmp1 = 'ymax
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'db10
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'quotient
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6)
tmp1 = 'pvr
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/XFMRP"
tmp4 = "/XFMRN"
tmp5 = 4.0820000000000000e+03
tmp6 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = (let
(tmp1)
tmp1 = 5
list(tmp1)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'minus
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = 'pvi
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net2"
tmp4 = "/gnd!"
tmp5 = "/PORT0/PLUS"
tmp6 = 0
tmp7 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 1
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = 't
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = -1.2511955783658266e+00
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 2
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "Conversion power gain from IF to RF"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "RF-TO-2nd Harmonic Ratio @ -8 dBm input at PA inut"
tmp1->expression = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'db
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net8"
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net9"
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = "powerif"
list(tmp1 tmp2)
)
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = -8.7500000000000000e+00
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4)
)
list(tmp1 tmp2)
)
tmp3 = 2.8000000000000000e+10
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'db
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net8"
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net9"
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = "powerif"
list(tmp1 tmp2)
)
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = -8.7500000000000000e+00
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4)
)
list(tmp1 tmp2)
)
tmp3 = 4.4800000000000000e+10
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = 't
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = -8.6725195306382972e+00
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 3
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "RF-TO-2nd Harmonic Ratio @ -8 dBm input at PA inut"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "Power consumption @ 1-dB compression"
tmp1->expression = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'abs
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6)
tmp1 = 'pvi
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net11"
tmp4 = 0
tmp5 = "/V2/PLUS"
tmp6 = 0
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6)
)
tmp3 = 0
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2)
)
tmp3 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = 'compressionVRI
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'v
tmp2 = "/RFOUTP"
tmp3 = '?result
tmp4 = "pss_fd"
list(tmp1 tmp2 tmp3 tmp4)
)
tmp3 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'v
tmp2 = "/RFOUTN"
tmp3 = '?result
tmp4 = "pss_fd"
list(tmp1 tmp2 tmp3 tmp4)
)
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 5
list(tmp1 tmp2)
)
tmp4 = '?rport
tmp5 = 5.0000000000000000e+01
tmp6 = '?gcomp
tmp7 = 1
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
list(tmp1 tmp2 tmp3)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = 't
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = 1.7363371291619325e-02
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 4
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "Power consumption @ 1-dB compression"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "DC level of IF Input Signal"
tmp1->expression = (let
(tmp1 tmp2)
tmp1 = 'abs
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/I2/IFIPAC"
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = (let
(tmp1)
tmp1 = 0
list(tmp1)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4)
)
tmp3 = -20
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = 't
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = 5.0346544578779839e-01
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 5
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "DC level of IF Input Signal"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "RF to image ratio "
tmp1->expression = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'db
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net8"
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net9"
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = "powerif"
list(tmp1 tmp2)
)
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = -8.7500000000000000e+00
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4)
)
list(tmp1 tmp2)
)
tmp3 = 2.8000000000000000e+10
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'db
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net8"
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net9"
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = "powerif"
list(tmp1 tmp2)
)
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = -8.7500000000000000e+00
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4)
)
list(tmp1 tmp2)
)
tmp3 = 1.6800000000000000e+10
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = 't
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = 2.3215734450391018e+01
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 6
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "RF to image ratio "
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "RF to LO Feedthrough Ratio"
tmp1->expression = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'dbm
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5)
tmp1 = 'pvr
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/XFMRP"
tmp4 = "/XFMRN"
tmp5 = 4.0820000000000000e+03
list(tmp1 tmp2 tmp3 tmp4 tmp5)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'powerif
list(tmp1 tmp2)
)
tmp4 = -8.5000000000000000e+00
list(tmp1 tmp2 tmp3 tmp4)
)
list(tmp1 tmp2)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'times
tmp2 = 5
tmp3 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5)
tmp1 = 'pv
tmp2 = "/freqif"
tmp3 = "value"
tmp4 = '?result
tmp5 = "variables"
list(tmp1 tmp2 tmp3 tmp4 tmp5)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'dbm
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5)
tmp1 = 'pvr
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/XFMRP"
tmp4 = "/XFMRN"
tmp5 = 4.0820000000000000e+03
list(tmp1 tmp2 tmp3 tmp4 tmp5)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'powerif
list(tmp1 tmp2)
)
tmp4 = -8.5000000000000000e+00
list(tmp1 tmp2 tmp3 tmp4)
)
list(tmp1 tmp2)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'times
tmp2 = 4
tmp3 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5)
tmp1 = 'pv
tmp2 = "/freqif"
tmp3 = "value"
tmp4 = '?result
tmp5 = "variables"
list(tmp1 tmp2 tmp3 tmp4 tmp5)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = 't
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = 6.2364198795512372e+01
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 7
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "RF to LO Feedthrough Ratio"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "RF_28G_MAG_PSS @ -3 dBm input"
tmp1->expression = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'abs
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'value
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/RFOUTP"
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'vh
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/RFOUTN"
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp3 = 2.8000000000000000e+10
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2)
)
tmp3 = -3
list(tmp1 tmp2 tmp3)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = 9.3587553253692934e-01
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 8
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "RF_28G_MAG_PSS @ -3 dBm input"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "Input single end differential swing at 1dB compression"
tmp1->expression = (let
(tmp1 tmp2 tmp3)
tmp1 = 'times
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'sqrt
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'quotient
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'times
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'pow
tmp2 = 10
tmp3 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'quotient
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = 'compressionVRI
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'difference
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'v
tmp2 = "/RFOUTP"
tmp3 = '?result
tmp4 = "pss_fd"
list(tmp1 tmp2 tmp3 tmp4)
)
tmp3 = (let
(tmp1 tmp2 tmp3 tmp4)
tmp1 = 'v
tmp2 = "/RFOUTN"
tmp3 = '?result
tmp4 = "pss_fd"
list(tmp1 tmp2 tmp3 tmp4)
)
list(tmp1 tmp2 tmp3)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 5
list(tmp1 tmp2)
)
tmp4 = '?rport
tmp5 = 5.0000000000000000e+01
tmp6 = '?gcomp
tmp7 = 1
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
tmp3 = 10
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2 tmp3)
)
tmp3 = 50
list(tmp1 tmp2 tmp3)
)
tmp3 = 1000
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'sqrt
tmp2 = 2
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = 't
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = 2.5532597287673847e-01
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 9
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "Input single end differential swing at 1dB compression"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "power curve [dBm] into next stage"
tmp1->expression = (let
(tmp1 tmp2)
tmp1 = 'dbm
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6)
tmp1 = 'pvr
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/XFMRP"
tmp4 = "/XFMRN"
tmp5 = 4.0820000000000000e+03
tmp6 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = (let
(tmp1)
tmp1 = 5
list(tmp1)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6)
)
list(tmp1 tmp2)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = 't
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = nil
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 10
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "power curve [dBm] into next stage"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->definedIn = ""
tmp1->name = "power gain curve"
tmp1->expression = (let
(tmp1 tmp2)
tmp1 = 'db10
tmp2 = (let
(tmp1 tmp2 tmp3)
tmp1 = 'quotient
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6)
tmp1 = 'pvr
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/XFMRP"
tmp4 = "/XFMRN"
tmp5 = 4.0820000000000000e+03
tmp6 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = (let
(tmp1)
tmp1 = 5
list(tmp1)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'minus
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = 'pvi
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 'pss
list(tmp1 tmp2)
)
tmp3 = "/net2"
tmp4 = "/gnd!"
tmp5 = "/PORT0/PLUS"
tmp6 = 0
tmp7 = (let
(tmp1 tmp2)
tmp1 = 'quote
tmp2 = 1
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3)
)
list(tmp1 tmp2)
)
tmp1->signal = nil
tmp1->scriptFile = ""
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = nil
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = nil
tmp1->plot = 't
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 11
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "power gain curve"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/PORT4/MINUS"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'terminal
tmp1->areaTable = nil
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y2"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 12
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/PORT4/MINUS"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/PORT4/PLUS"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'terminal
tmp1->areaTable = nil
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y3"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 13
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/PORT4/PLUS"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/PORT0/MINUS"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'terminal
tmp1->areaTable = nil
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y4"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 14
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/PORT0/MINUS"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/PORT0/PLUS"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'terminal
tmp1->areaTable = nil
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y5"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 15
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/PORT0/PLUS"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/I2/VDD"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'terminal
tmp1->areaTable = nil
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y6"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 16
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/I2/VDD"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/I2/VSS"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'terminal
tmp1->areaTable = nil
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y7"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 17
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/I2/VSS"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/V3/PLUS"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'terminal
tmp1->areaTable = nil
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y8"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 18
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/V3/PLUS"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/V2/PLUS"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'terminal
tmp1->areaTable = nil
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y9"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 19
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/V2/PLUS"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/L2/PLUS"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'terminal
tmp1->areaTable = nil
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y1"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 20
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/L2/PLUS"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/L1/PLUS"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = nil
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'terminal
tmp1->areaTable = nil
tmp1->selectionDetail = (let
(tmp1)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'color
tmp2 = (let
(tmp1 tmp2)
tmp1 = "y2"
tmp2 = "drawing"
list(tmp1 tmp2)
)
list(tmp1 tmp2)
)
list(tmp1)
)
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = nil
tmp1->index = 21
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/L1/PLUS"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/RFOUTP"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = "auto"
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'net
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = 2
tmp1->index = 22
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/RFOUTP"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
savedComponent = (let
(tmp1)
(unless tmp1
tmp1 = make_sevOutputStruct()
)
(unless tmp1
tmp1 = (ncons nil)
)
tmp1->inLastSet = nil
tmp1->name = nil
tmp1->expression = nil
tmp1->signal = "/RFOUTN"
tmp1->scriptFile = nil
tmp1->type2 = nil
tmp1->evalType = nil
tmp1->displayIt = nil
tmp1->internalName = nil
tmp1->masterName = nil
tmp1->masterScriptFile = nil
tmp1->saveScriptFile = nil
tmp1->updatedScriptFile = nil
tmp1->saveMasterScriptFile = nil
tmp1->isReferenced = nil
tmp1->lastEvalTime = nil
tmp1->origin = "auto"
tmp1->sweepSet = nil
tmp1->depList = nil
tmp1->type = 'net
tmp1->areaTable = nil
tmp1->selectionDetail = nil
tmp1->value = nil
tmp1->plot = nil
tmp1->save = 't
tmp1->march = nil
tmp1->implicit = 2
tmp1->index = 23
tmp1->timeStamp = nil
tmp1->graphType = nil
tmp1->yaxisLabel = nil
tmp1->label = nil
tmp1->yaxisUnit = nil
tmp1->waveSpec = nil
tmp1->uniqueName = "/RFOUTN"
tmp1->inValidObject = nil
list(tmp1)
)
_outputList = nconc( _outputList savedComponent) 
savedComponent = nil 
_envSaveOptions = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9 tmp10 tmp11 tmp12 tmp13 tmp14 tmp15 tmp16 tmp17 tmp18 tmp19 tmp20 tmp21 tmp22 tmp23 tmp24 tmp25 tmp26 tmp27 tmp28 tmp29 tmp30 tmp31 tmp32 tmp33 tmp34 tmp35 tmp36 tmp37 tmp38 tmp39 tmp40 tmp41 tmp42 tmp43 tmp44)
tmp1 = (let
(tmp1 tmp2)
tmp1 = 'keepRegPcellLabel
tmp2 = ""
list(tmp1 tmp2)
)
tmp2 = (let
(tmp1 tmp2)
tmp1 = 'keepRegisteredPcell
tmp2 = 't
list(tmp1 tmp2)
)
tmp3 = (let
(tmp1 tmp2)
tmp1 = 'clearPcell
tmp2 = ""
list(tmp1 tmp2)
)
tmp4 = (let
(tmp1 tmp2)
tmp1 = 'savePcellSelect
tmp2 = ""
list(tmp1 tmp2)
)
tmp5 = (let
(tmp1 tmp2)
tmp1 = 'savePcell
tmp2 = ""
list(tmp1 tmp2)
)
tmp6 = (let
(tmp1 tmp2)
tmp1 = 'subcktoppoint
list(tmp1 tmp2)
)
tmp7 = (let
(tmp1 tmp2)
tmp1 = 'pcellFrame
tmp2 = ""
list(tmp1 tmp2)
)
tmp8 = (let
(tmp1 tmp2)
tmp1 = 'saveBySubcktInstances
(unless tmp2
tmp2 = (ncons nil)
)
list(tmp1 tmp2)
)
tmp9 = (let
(tmp1 tmp2)
tmp1 = 'saveBySubcktFrame
tmp2 = ""
list(tmp1 tmp2)
)
tmp10 = (let
(tmp1 tmp2)
tmp1 = 'allcapInfo
list(tmp1 tmp2)
)
tmp11 = (let
(tmp1 tmp2)
tmp1 = 'simStatisticsInfo
list(tmp1 tmp2)
)
tmp12 = (let
(tmp1 tmp2)
tmp1 = 'extremesInfo
list(tmp1 tmp2)
)
tmp13 = (let
(tmp1 tmp2)
tmp1 = 'assertsInfo
list(tmp1 tmp2)
)
tmp14 = (let
(tmp1 tmp2)
tmp1 = 'designParamValInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp15 = (let
(tmp1 tmp2)
tmp1 = 'subcktsInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp16 = (let
(tmp1 tmp2)
tmp1 = 'primitivesInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp17 = (let
(tmp1 tmp2)
tmp1 = 'outputParamInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp18 = (let
(tmp1 tmp2)
tmp1 = 'elementInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp19 = (let
(tmp1 tmp2)
tmp1 = 'modelParamInfo
tmp2 = 't
list(tmp1 tmp2)
)
tmp20 = (let
(tmp1 tmp2)
tmp1 = 'fastViewOption
list(tmp1 tmp2)
)
tmp21 = (let
(tmp1 tmp2)
tmp1 = 'simOutputFormat
tmp2 = "psfxl"
list(tmp1 tmp2)
)
tmp22 = (let
(tmp1 tmp2)
tmp1 = 'outputFrame
tmp2 = ""
list(tmp1 tmp2)
)
tmp23 = (let
(tmp1 tmp2)
tmp1 = 'captab_intrinsic_cap_merge
list(tmp1 tmp2)
)
tmp24 = (let
(tmp1 tmp2)
tmp1 = 'captab_threshold
tmp2 = ""
list(tmp1 tmp2)
)
tmp25 = (let
(tmp1 tmp2)
tmp1 = 'captab_sort
tmp2 = "name"
list(tmp1 tmp2)
)
tmp26 = (let
(tmp1 tmp2)
tmp1 = 'captab_detail
tmp2 = "node"
list(tmp1 tmp2)
)
tmp27 = (let
(tmp1 tmp2)
tmp1 = 'infoOptions
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9 tmp10)
tmp1 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = "modelParameter"
tmp2 = "models"
tmp3 = "rawfile"
tmp4 = ""
tmp5 = ""
tmp6 = ""
tmp7 = 't
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
tmp2 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = "element"
tmp2 = "inst"
tmp3 = "rawfile"
tmp4 = ""
tmp5 = ""
tmp6 = ""
tmp7 = 't
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
tmp3 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = "outputParameter"
tmp2 = "output"
tmp3 = "rawfile"
tmp4 = ""
tmp5 = ""
tmp6 = ""
tmp7 = 't
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
tmp4 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = "designParamVals"
tmp2 = "parameters"
tmp3 = "rawfile"
tmp4 = ""
tmp5 = ""
tmp6 = ""
tmp7 = 't
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
tmp5 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = "primitives"
tmp2 = "primitives"
tmp3 = "rawfile"
tmp4 = ""
tmp5 = ""
tmp6 = ""
tmp7 = 't
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
tmp6 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = "subckts"
tmp2 = "subckts"
tmp3 = "rawfile"
tmp4 = ""
tmp5 = ""
tmp6 = ""
tmp7 = 't
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
tmp7 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = "asserts"
tmp2 = "assert"
tmp3 = "rawfile"
tmp4 = ""
tmp5 = ""
tmp6 = ""
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
tmp8 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = "extremeinfo"
tmp2 = "all"
tmp3 = "logfile"
tmp4 = ""
tmp5 = "yes"
tmp6 = ""
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
tmp9 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = "simStatistics"
tmp2 = "simstat"
tmp3 = "rawfile"
tmp4 = ""
tmp5 = ""
tmp6 = ""
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
tmp10 = (let
(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
tmp1 = "<Click_To_Add>"
tmp2 = "none"
tmp3 = "rawfile"
tmp4 = ""
tmp5 = ""
tmp6 = ""
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7)
)
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9 tmp10)
)
list(tmp1 tmp2)
)
tmp28 = (let
(tmp1 tmp2)
tmp1 = 'infoFrame
tmp2 = ""
list(tmp1 tmp2)
)
tmp29 = (let
(tmp1 tmp2)
tmp1 = 'sumInfo_a
tmp2 = ""
list(tmp1 tmp2)
)
tmp30 = (let
(tmp1 tmp2)
tmp1 = 'time_window_a
tmp2 = ""
list(tmp1 tmp2)
)
tmp31 = (let
(tmp1 tmp2)
tmp1 = 'subcktiprobes
tmp2 = ""
list(tmp1 tmp2)
)
tmp32 = (let
(tmp1 tmp2)
tmp1 = 'signalNames
tmp2 = ""
list(tmp1 tmp2)
)
tmp33 = (let
(tmp1 tmp2)
tmp1 = 'timeWindow
tmp2 = ""
list(tmp1 tmp2)
)
tmp34 = (let
(tmp1 tmp2)
tmp1 = 'timeWindLabel
tmp2 = ""
list(tmp1 tmp2)
)
tmp35 = (let
(tmp1 tmp2)
tmp1 = 'enableTimeWindowSetup
list(tmp1 tmp2)
)
tmp36 = (let
(tmp1 tmp2)
tmp1 = 'timewindFrame
tmp2 = ""
list(tmp1 tmp2)
)
tmp37 = (let
(tmp1 tmp2)
tmp1 = 'saveahdlvars
tmp2 = ""
list(tmp1 tmp2)
)
tmp38 = (let
(tmp1 tmp2)
tmp1 = 'subcktprobelvl
tmp2 = ""
list(tmp1 tmp2)
)
tmp39 = (let
(tmp1 tmp2)
tmp1 = 'useprobes
tmp2 = ""
list(tmp1 tmp2)
)
tmp40 = (let
(tmp1 tmp2)
tmp1 = 'currents
tmp2 = ""
list(tmp1 tmp2)
)
tmp41 = (let
(tmp1 tmp2)
tmp1 = 'nestlvl
tmp2 = ""
list(tmp1 tmp2)
)
tmp42 = (let
(tmp1 tmp2)
tmp1 = 'pwr
tmp2 = ""
list(tmp1 tmp2)
)
tmp43 = (let
(tmp1 tmp2)
tmp1 = 'save
tmp2 = "lvlpub"
list(tmp1 tmp2)
)
tmp44 = (let
(tmp1 tmp2)
tmp1 = 'saveFrame
tmp2 = ""
list(tmp1 tmp2)
)
list(tmp1 tmp2 tmp3 tmp4 tmp5 tmp6 tmp7 tmp8 tmp9 tmp10 tmp11 tmp12 tmp13 tmp14 tmp15 tmp16 tmp17 tmp18 tmp19 tmp20 tmp21 tmp22 tmp23 tmp24 tmp25 tmp26 tmp27 tmp28 tmp29 tmp30 tmp31 tmp32 tmp33 tmp34 tmp35 tmp36 tmp37 tmp38 tmp39 tmp40 tmp41 tmp42 tmp43 tmp44)
)
savedComponent = list( _outputList _envSaveOptions ) 
_outputList = 'unbound
 _envSaveOptions = 'unbound
